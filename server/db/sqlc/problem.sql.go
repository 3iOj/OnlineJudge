// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: problem.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createProblem = `-- name: CreateProblem :one
INSERT INTO problems (
  problem_name,
  description,
  sample_input,
  sample_output,
  ideal_solution,
  time_limit,
  memory_limit,
  code_size,
  created_at,
  contest_id
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
) RETURNING id, problem_name, description, sample_input, sample_output, ideal_solution, time_limit, memory_limit, code_size, rating, created_at, contest_id
`

type CreateProblemParams struct {
	ProblemName   string    `json:"problem_name"`
	Description   string    `json:"description"`
	SampleInput   string    `json:"sample_input"`
	SampleOutput  string    `json:"sample_output"`
	IdealSolution string    `json:"ideal_solution"`
	TimeLimit     int32     `json:"time_limit"`
	MemoryLimit   int32     `json:"memory_limit"`
	CodeSize      int32     `json:"code_size"`
	CreatedAt     time.Time `json:"created_at"`
	ContestID     int64     `json:"contest_id"`
}

func (q *Queries) CreateProblem(ctx context.Context, arg CreateProblemParams) (Problem, error) {
	row := q.db.QueryRowContext(ctx, createProblem,
		arg.ProblemName,
		arg.Description,
		arg.SampleInput,
		arg.SampleOutput,
		arg.IdealSolution,
		arg.TimeLimit,
		arg.MemoryLimit,
		arg.CodeSize,
		arg.CreatedAt,
		arg.ContestID,
	)
	var i Problem
	err := row.Scan(
		&i.ID,
		&i.ProblemName,
		&i.Description,
		&i.SampleInput,
		&i.SampleOutput,
		&i.IdealSolution,
		&i.TimeLimit,
		&i.MemoryLimit,
		&i.CodeSize,
		&i.Rating,
		&i.CreatedAt,
		&i.ContestID,
	)
	return i, err
}

const deleteProblem = `-- name: DeleteProblem :exec
DELETE FROM Problems
WHERE id = $1
`

func (q *Queries) DeleteProblem(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteProblem, id)
	return err
}

const getProblem = `-- name: GetProblem :one
SELECT id, problem_name, description, sample_input, sample_output, ideal_solution, time_limit, memory_limit, code_size, rating, created_at, contest_id FROM Problems
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProblem(ctx context.Context, id int64) (Problem, error) {
	row := q.db.QueryRowContext(ctx, getProblem, id)
	var i Problem
	err := row.Scan(
		&i.ID,
		&i.ProblemName,
		&i.Description,
		&i.SampleInput,
		&i.SampleOutput,
		&i.IdealSolution,
		&i.TimeLimit,
		&i.MemoryLimit,
		&i.CodeSize,
		&i.Rating,
		&i.CreatedAt,
		&i.ContestID,
	)
	return i, err
}

const listProblems = `-- name: ListProblems :many
SELECT id, problem_name, description, sample_input, sample_output, ideal_solution, time_limit, memory_limit, code_size, rating, created_at, contest_id FROM Problems
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListProblemsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListProblems(ctx context.Context, arg ListProblemsParams) ([]Problem, error) {
	rows, err := q.db.QueryContext(ctx, listProblems, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Problem{}
	for rows.Next() {
		var i Problem
		if err := rows.Scan(
			&i.ID,
			&i.ProblemName,
			&i.Description,
			&i.SampleInput,
			&i.SampleOutput,
			&i.IdealSolution,
			&i.TimeLimit,
			&i.MemoryLimit,
			&i.CodeSize,
			&i.Rating,
			&i.CreatedAt,
			&i.ContestID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProblem = `-- name: UpdateProblem :one
UPDATE Problems
  set problem_name = $2,
  description = $3,
  sample_input = $4,
  sample_output = $5,
  ideal_solution = $6,
  time_limit = $7,
  memory_limit = $8,
  code_size = $9,
  rating = $10
WHERE id = $1
RETURNING id, problem_name, description, sample_input, sample_output, ideal_solution, time_limit, memory_limit, code_size, rating, created_at, contest_id
`

type UpdateProblemParams struct {
	ID            int64         `json:"id"`
	ProblemName   string        `json:"problem_name"`
	Description   string        `json:"description"`
	SampleInput   string        `json:"sample_input"`
	SampleOutput  string        `json:"sample_output"`
	IdealSolution string        `json:"ideal_solution"`
	TimeLimit     int32         `json:"time_limit"`
	MemoryLimit   int32         `json:"memory_limit"`
	CodeSize      int32         `json:"code_size"`
	Rating        sql.NullInt32 `json:"rating"`
}

func (q *Queries) UpdateProblem(ctx context.Context, arg UpdateProblemParams) (Problem, error) {
	row := q.db.QueryRowContext(ctx, updateProblem,
		arg.ID,
		arg.ProblemName,
		arg.Description,
		arg.SampleInput,
		arg.SampleOutput,
		arg.IdealSolution,
		arg.TimeLimit,
		arg.MemoryLimit,
		arg.CodeSize,
		arg.Rating,
	)
	var i Problem
	err := row.Scan(
		&i.ID,
		&i.ProblemName,
		&i.Description,
		&i.SampleInput,
		&i.SampleOutput,
		&i.IdealSolution,
		&i.TimeLimit,
		&i.MemoryLimit,
		&i.CodeSize,
		&i.Rating,
		&i.CreatedAt,
		&i.ContestID,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: contest.sql

package db

import (
	"context"
	"time"
)

const addContestCreators = `-- name: AddContestCreators :one
INSERT INTO contest_creators (
    contest_id,
    creator_id
) VALUES (
    $1, $2
) RETURNING contest_id, creator_id, created_at
`

type AddContestCreatorsParams struct {
	ContestID int64 `json:"contest_id"`
	CreatorID int64 `json:"creator_id"`
}

func (q *Queries) AddContestCreators(ctx context.Context, arg AddContestCreatorsParams) (ContestCreator, error) {
	row := q.db.QueryRowContext(ctx, addContestCreators, arg.ContestID, arg.CreatorID)
	var i ContestCreator
	err := row.Scan(&i.ContestID, &i.CreatorID, &i.CreatedAt)
	return i, err
}

const createContest = `-- name: CreateContest :one
INSERT INTO contests (
  contest_name,
  start_time,
  end_time,
  duration,
  registration_start,
  registration_end,
  announcement_blog,
  editorial_blog
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, contest_name, start_time, end_time, duration, registration_start, registration_end, announcement_blog, editorial_blog, created_at, updated_at
`

type CreateContestParams struct {
	ContestName       string        `json:"contest_name"`
	StartTime         time.Time     `json:"start_time"`
	EndTime           time.Time     `json:"end_time"`
	Duration          time.Duration `json:"duration"`
	RegistrationStart time.Time     `json:"registration_start"`
	RegistrationEnd   time.Time     `json:"registration_end"`
	AnnouncementBlog  int64         `json:"announcement_blog"`
	EditorialBlog     int64         `json:"editorial_blog"`
}

func (q *Queries) CreateContest(ctx context.Context, arg CreateContestParams) (Contest, error) {
	row := q.db.QueryRowContext(ctx, createContest,
		arg.ContestName,
		arg.StartTime,
		arg.EndTime,
		arg.Duration,
		arg.RegistrationStart,
		arg.RegistrationEnd,
		arg.AnnouncementBlog,
		arg.EditorialBlog,
	)
	var i Contest
	err := row.Scan(
		&i.ID,
		&i.ContestName,
		&i.StartTime,
		&i.EndTime,
		&i.Duration,
		&i.RegistrationStart,
		&i.RegistrationEnd,
		&i.AnnouncementBlog,
		&i.EditorialBlog,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteContest = `-- name: DeleteContest :exec
DELETE FROM contests
WHERE id = $1
`

func (q *Queries) DeleteContest(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteContest, id)
	return err
}

const getContest = `-- name: GetContest :one
SELECT id, contest_name, start_time, end_time, duration, registration_start, registration_end, announcement_blog, editorial_blog, created_at, updated_at FROM contests
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetContest(ctx context.Context, id int64) (Contest, error) {
	row := q.db.QueryRowContext(ctx, getContest, id)
	var i Contest
	err := row.Scan(
		&i.ID,
		&i.ContestName,
		&i.StartTime,
		&i.EndTime,
		&i.Duration,
		&i.RegistrationStart,
		&i.RegistrationEnd,
		&i.AnnouncementBlog,
		&i.EditorialBlog,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listContests = `-- name: ListContests :many
SELECT id, contest_name, start_time, end_time, duration, registration_start, registration_end, announcement_blog, editorial_blog, created_at, updated_at FROM contests
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListContestsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListContests(ctx context.Context, arg ListContestsParams) ([]Contest, error) {
	rows, err := q.db.QueryContext(ctx, listContests, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Contest{}
	for rows.Next() {
		var i Contest
		if err := rows.Scan(
			&i.ID,
			&i.ContestName,
			&i.StartTime,
			&i.EndTime,
			&i.Duration,
			&i.RegistrationStart,
			&i.RegistrationEnd,
			&i.AnnouncementBlog,
			&i.EditorialBlog,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

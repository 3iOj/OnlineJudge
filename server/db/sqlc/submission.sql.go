// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: submission.sql

package db

import (
	"context"
	"database/sql"
)

const createSubmission = `-- name: CreateSubmission :one
INSERT INTO Submissions (
  problem_id,
  username,
  user_id,
  contest_id,
  language,
  code
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
) RETURNING id, submitted_at, problem_id, username, user_id, contest_id, language, verdict, code, exec_time, memory_consumed, score
`

type CreateSubmissionParams struct {
	ProblemID      int64          `json:"problem_id"`
	Username       string         `json:"username"`
	UserID         int64          `json:"user_id"`
	ContestID      int64          `json:"contest_id"`
	Language       string         `json:"language"`
	Verdict        sql.NullString `json:"verdict"`
	Code           string         `json:"code"`
	ExecTime       sql.NullInt32  `json:"exec_time"`
	MemoryConsumed sql.NullInt32  `json:"memory_consumed"`
	Score          sql.NullInt32  `json:"score"`
}

func (q *Queries) CreateSubmission(ctx context.Context, arg CreateSubmissionParams) (Submission, error) {
	row := q.db.QueryRowContext(ctx, createSubmission,
		arg.ProblemID,
		arg.Username,
		arg.UserID,
		arg.ContestID,
		arg.Language,
		arg.Verdict,
		arg.Code,
		arg.ExecTime,
		arg.MemoryConsumed,
		arg.Score,
	)
	var i Submission
	err := row.Scan(
		&i.ID,
		&i.SubmittedAt,
		&i.ProblemID,
		&i.Username,
		&i.UserID,
		&i.ContestID,
		&i.Language,
		&i.Verdict,
		&i.Code,
		&i.ExecTime,
		&i.MemoryConsumed,
		&i.Score,
	)
	return i, err
}

const deleteSubmission = `-- name: DeleteSubmission :exec
DELETE FROM Submissions
WHERE id = $1
`

func (q *Queries) DeleteSubmission(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSubmission, id)
	return err
}

const getSubmission = `-- name: GetSubmission :one
SELECT id, submitted_at, problem_id, username, user_id, contest_id, language, verdict, code, exec_time, memory_consumed, score FROM Submissions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSubmission(ctx context.Context, id int64) (Submission, error) {
	row := q.db.QueryRowContext(ctx, getSubmission, id)
	var i Submission
	err := row.Scan(
		&i.ID,
		&i.SubmittedAt,
		&i.ProblemID,
		&i.Username,
		&i.UserID,
		&i.ContestID,
		&i.Language,
		&i.Verdict,
		&i.Code,
		&i.ExecTime,
		&i.MemoryConsumed,
		&i.Score,
	)
	return i, err
}

const listSubmissions = `-- name: ListSubmissions :many
SELECT id, submitted_at, problem_id, username, user_id, contest_id, language, verdict, code, exec_time, memory_consumed, score FROM Submissions
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListSubmissionsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListSubmissions(ctx context.Context, arg ListSubmissionsParams) ([]Submission, error) {
	rows, err := q.db.QueryContext(ctx, listSubmissions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Submission{}
	for rows.Next() {
		var i Submission
		if err := rows.Scan(
			&i.ID,
			&i.SubmittedAt,
			&i.ProblemID,
			&i.Username,
			&i.UserID,
			&i.ContestID,
			&i.Language,
			&i.Verdict,
			&i.Code,
			&i.ExecTime,
			&i.MemoryConsumed,
			&i.Score,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSubmission = `-- name: UpdateSubmission :one
UPDATE Submissions
SET 
  verdict = COALESCE($2, verdict),
  memory_consumed = COALESCE($3, memory_consumed),
  exec_time = COALESCE($4, exec_time),
  score = COALESCE($5, score)
WHERE id = $1
RETURNING id, submitted_at, problem_id, username, user_id, contest_id, language, verdict, code, exec_time, memory_consumed, score
`

type UpdateSubmissionParams struct {
	ID             int64          `json:"id"`
	Verdict        sql.NullString `json:"verdict"`
	MemoryConsumed sql.NullInt32  `json:"memory_consumed"`
	ExecTime       sql.NullInt32  `json:"exec_time"`
	Score          sql.NullInt32  `json:"score"`
}

func (q *Queries) UpdateSubmission(ctx context.Context, arg UpdateSubmissionParams) (Submission, error) {
	row := q.db.QueryRowContext(ctx, updateSubmission,
		arg.ID,
		arg.Verdict,
		arg.MemoryConsumed,
		arg.ExecTime,
		arg.Score,
	)
	var i Submission
	err := row.Scan(
		&i.ID,
		&i.SubmittedAt,
		&i.ProblemID,
		&i.Username,
		&i.UserID,
		&i.ContestID,
		&i.Language,
		&i.Verdict,
		&i.Code,
		&i.ExecTime,
		&i.MemoryConsumed,
		&i.Score,
	)
	return i, err
}
